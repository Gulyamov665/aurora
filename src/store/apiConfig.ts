// import { getToken } from "@/Utils/getToken";
// import { BaseQueryFn, FetchArgs, fetchBaseQuery, FetchBaseQueryError } from "@reduxjs/toolkit/query/react";
// import { setUser } from "./user/slices/authSlice";
// const baseURL = import.meta.env.VITE_BASE_URL;

// const base = fetchBaseQuery({
//   baseUrl: baseURL,
//   credentials: "include",
//   prepareHeaders: (headers) => {
//     const token = getToken();
//     if (token) {
//       headers.set("Authorization", token);
//     }
//     return headers;
//   },
// });

// export const baseQuery: BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError> = async (
//   args,
//   api,
//   extraOptions
// ) => {
//   const result = await base(args, api, extraOptions);

//   if (result.error?.status === 401) {
//     const refreshResult = await baseQuery("/auth/refresh", api, extraOptions);

//     api.dispatch(setUser(null));
//     localStorage.removeItem("token");
//     localStorage.removeItem("refresh");
//   }

//   if (result.error?.status === 500) {
//     console.error("–û—à–∏–±–∫–∞ 500: –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", result.error);
//     const errorData = result.error.data as { message: string };
//     alert(`${errorData.message}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
//   }

//   return result;
// };

import { getToken } from "@/Utils/getToken";
import {
  BaseQueryFn,
  FetchArgs,
  fetchBaseQuery,
  FetchBaseQueryError,
  FetchBaseQueryMeta,
  QueryReturnValue,
} from "@reduxjs/toolkit/query/react";
import { logout } from "./user/slices/authSlice";

const baseURL = import.meta.env.VITE_BASE_URL;

const baseQuery1 = fetchBaseQuery({
  baseUrl: baseURL,
  credentials: "include", // üîê –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HttpOnly cookie
  prepareHeaders: (headers) => {
    const token = getToken(); // üîÑ accessToken –∏–∑ –ø–∞–º—è—Ç–∏ / localStorage (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
    if (token) {
      headers.set("Authorization", `${token}`);
    }
    return headers;
  },
});

export const baseQuery: BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError> = async (
  args,
  api,
  extraOptions
) => {
  let result = await baseQuery1(args, api, extraOptions);

  if (result.error?.status === 401) {
    // üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å accessToken —á–µ—Ä–µ–∑ refreshToken –∏–∑ HttpOnly cookie
    const refreshResult = await baseQuery1(
      {
        url: "v1/auth/refresh",
        method: "POST", // üëà –º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
        body: { refresh: localStorage.getItem("refresh") },
        credentials: "include",
      },
      api,
      extraOptions
    );

    if (refreshResult.data && typeof refreshResult.data === "object" && "accessToken" in refreshResult.data) {
      const newToken = (refreshResult.data as any).accessToken;
      localStorage.setItem("token", newToken);
      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ localStorage/–ø–∞–º—è—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      // setToken(newToken);
      // api.dispatch(setUser({ token: newToken })); // –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É

      // üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      result = (await baseQuery1(args, api, extraOptions)) as QueryReturnValue<
        unknown,
        FetchBaseQueryError,
        FetchBaseQueryMeta
      >;
    } else {
      // üîê –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω ‚Äî –¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
      api.dispatch(logout());
      localStorage.removeItem("token");
    }
  }

  if (result.error?.status === 500) {
    console.error("–û—à–∏–±–∫–∞ 500: –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", result.error);
    const errorData = result.error.data as { message: string };
    alert(`${errorData.message}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
  }

  return result;
};
